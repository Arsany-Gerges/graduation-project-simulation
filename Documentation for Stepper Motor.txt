### Documentation for Stepper Motor with Ultrasonic Sensor for Obstacle Detection and Ignoring

#### Project Overview

This project involves controlling a **Stepper Motor** to rotate by 90 degrees in both clockwise and counterclockwise directions. The motor's movement is monitored for obstacles using an **Ultrasonic Sensor**, which measures the distance to objects in its path. The system can ignore obstacles based on a signal input, allowing the motor to continue its rotation even if an obstacle is detected. If the obstacle is removed, the motor resumes its regular movement. This setup is ideal for applications where obstacles need to be avoided or ignored while ensuring continuous movement.

#### Functional Description

1. **Motor Movement**: 
   - The motor rotates 90 degrees in both clockwise and counterclockwise directions, with each step representing a 5-degree movement.
   - After every 5-degree rotation, the **Ultrasonic Sensor** measures the distance to detect if an obstacle exists in the path.

2. **Obstacle Detection**:
   - If an obstacle is detected (i.e., the distance measured by the sensor is below a predefined threshold), the system checks if the obstacle has been removed or if it should continue moving based on a signal input.
   - If the obstacle persists, the system continuously checks if the obstacle is removed.
   
3. **Signal to Ignore Obstacle**:
   - A pulse signal is used to ignore the detected obstacle temporarily. Once the signal is received, the system continues its rotation and ignores the obstacle until it is passed.
   - The system ensures that even if the signal to ignore is turned off (pulse goes low), the obstacle will still be ignored until the motor has moved past it.
   
4. **Normal Operation**:
   - If no obstacle is detected, the motor moves without interruption.
   - The motor performs a full rotation for 90 degrees clockwise and 90 degrees counterclockwise, repeating this process continuously.

#### Components Used

1. **Hardware**:
   - **Stepper Motor**: A 28BYJ-48 stepper motor used to rotate the mechanism in 5-degree increments.
   - **Ultrasonic Sensor (HC-SR04)**: Used to measure the distance from the motor to obstacles in its path.
   - **Arduino UNO**: The main controller for the system, handling motor control and sensor readings.
   - **Signal Pin (Pulse Input)**: Used to send a pulse signal to the system to decide whether to ignore the current obstacle or not.

2. **Pins**:
   - **TRIG_PIN** (Pin 9): Trigger pin for the ultrasonic sensor.
   - **ECHO_PIN** (Pin 10): Echo pin for the ultrasonic sensor.
   - **SIGNAL_PIN** (Pin 7): Input pin to receive the ignore pulse signal.

#### Design Considerations

1. **Motor Control**:
   - The **Stepper Motor** is controlled using the **Stepper library** in Arduino. Each 90-degree rotation is split into 18 steps (5 degrees per step). The motor moves step-by-step, and after each step, the sensor reads the distance.
   
2. **Distance Measurement**:
   - The ultrasonic sensor provides a distance reading every time the motor moves. If the measured distance is below the threshold (20 cm in this case), the system considers the obstacle present and pauses to check if the obstacle has been removed.
   
3. **Signal Handling**:
   - The pulse signal received through the **SIGNAL_PIN** determines whether the obstacle should be ignored. If the signal is HIGH, the system will ignore the obstacle and continue rotating.
   - The ignore condition persists even if the signal goes LOW after the pulse, ensuring that the system keeps ignoring the obstacle until it is passed.

#### Code Explanation

The code controls the **Stepper Motor** and processes the distance readings from the **Ultrasonic Sensor** to detect obstacles. Here's how the code works:

1. **Motor Initialization**:
   - The stepper motor is configured with the `Stepper` library, specifying the number of steps per revolution and the pins used to control the motor.
   
2. **Sensor Reading**:
   - The `measureDistance()` function triggers the ultrasonic sensor to send a pulse and measure the time taken for the echo to return. This time is used to calculate the distance to the obstacle.

3. **Motor Rotation**:
   - The motor rotates 90 degrees in both clockwise and counterclockwise directions, moving 5 degrees per step. After each movement, the `measureDistance()` function checks for obstacles.
   
4. **Obstacle Detection**:
   - If the measured distance is less than or equal to the defined threshold (20 cm), the system checks whether the obstacle is still present or has been removed.
   - If an obstacle is detected, the system waits for it to be removed or for a pulse signal to ignore the obstacle.

5. **Ignoring Obstacle**:
   - Once the signal is received (pulse HIGH), the system starts ignoring the obstacle. The ignore condition persists until the motor moves past the obstacle.
   
6. **Normal Movement**:
   - When no obstacle is detected, or the obstacle is ignored, the motor continues its movement as usual.

#### Code

```cpp
#include <Stepper.h>  // Include the Stepper motor library

// Motor Configuration
const int stepsPerRevolution = 2048;  // 28BYJ-48 motor (used for 90-degree rotation)
Stepper myStepper(stepsPerRevolution, 3, 4, 5, 6);  // Motor connected to pins 3, 4, 5, 6

// Ultrasonic Sensor Pins
#define TRIG_PIN 9
#define ECHO_PIN 10

// Threshold for obstacle detection
#define OBSTACLE_THRESHOLD 20  // Distance threshold in cm

// Interval for taking sensor readings (every 5 degrees)
#define DEGREE_STEP 5
#define STEPS_PER_DEGREE (stepsPerRevolution / 360)

// Signal Pin for continue and ignore command (pulse signal)
#define SIGNAL_PIN 7  // Pin to receive the signal to continue and ignore obstacle

// Variables to track obstacle status
bool obstacleDetected = false;
bool obstacleIgnored = false;  // Tracks whether the current obstacle is being ignored
bool skipObstacle = false;    // Tracks whether we should skip the obstacle

void setup() {
  Serial.begin(9600);
  myStepper.setSpeed(15);  // Set motor speed (RPM)

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(SIGNAL_PIN, INPUT);  // Set the signal pin as input
}

void loop() {
  // Rotate motor 90 degrees clockwise, checking for obstacles every 5 degrees
  rotateMotorClockwise();

  // Rotate motor 90 degrees counterclockwise
  rotateMotorCounterClockwise();
}

// Function to rotate the motor clockwise by 90 degrees
void rotateMotorClockwise() {
  Serial.println("Rotating 90 degrees clockwise...");

  for (int i = 0; i < 18; i++) {  // 90 degrees = 18 steps (each step = 5 degrees)
    moveMotor(1);  // Move 5 degrees clockwise
    long distance = measureDistance();  // Measure distance

    Serial.print("Distance at ");
    Serial.print((i + 1) * DEGREE_STEP);
    Serial.print(" degrees: ");
    Serial.println(distance);

    // Check if obstacle is detected
    if (distance <= OBSTACLE_THRESHOLD) {
      if (!obstacleDetected) {
        obstacleDetected = true;  // Set obstacle detected status
        obstacleIgnored = false;  // Reset ignore flag
        Serial.println("Obstacle detected! Checking if obstacle is removed...");
      }

      // Continuously check if the obstacle is removed
      while (obstacleDetected) {
        long distance = measureDistance();  // Keep measuring distance

        if (distance > OBSTACLE_THRESHOLD) {
          // If the obstacle is removed
          Serial.println("Obstacle removed. Continuing movement...");
          obstacleDetected = false;  // Reset obstacle detected status
          break;  // Exit while loop, continue moving
        }

        // Check if a pulse signal is received to ignore the obstacle
        if (digitalRead(SIGNAL_PIN) == HIGH && !obstacleIgnored) {
          Serial.println("Pulse received: Obstacle ignored. Continuing movement.");
          obstacleDetected = false;  // Ignore the obstacle and continue moving
          obstacleIgnored = true;  // Mark that the obstacle is ignored
          skipObstacle = true;  // Flag that we are skipping the current obstacle
          break;  // Exit while loop
        }

        delay(100);  // Wait a little before checking again
      }
    } else {
      // If no obstacle, continue moving as usual
      delay(10);  // Small delay to allow for smooth motor movement
    }

    // If skipping obstacle, continue ignoring the obstacle
    if (skipObstacle) {
      Serial.println("Skipping the obstacle...");
      while (distance <= OBSTACLE_THRESHOLD) {  // Keep skipping as long as obstacle is present
        distance = measureDistance();  // Keep measuring distance
        delay(100);  // Continue checking
      }
      // Once the obstacle is skipped (removed), stop skipping and continue
      skipObstacle = false;
    }
  }

  Serial.println("Reached 90 degrees clockwise.");
}

// Function to rotate the motor counterclockwise by 90 degrees
void rotateMotorCounterClockwise() {
  Serial.println("Rotating 90 degrees counterclockwise...");

  for (int i = 0; i < 18; i++) {  // 90 degrees = 18 steps (each step = 5 degrees)
    moveMotor(-1);  // Move 5 degrees counterclockwise
    long distance =

 measureDistance();  // Measure distance

    Serial.print("Distance at ");
    Serial.print((i + 1) * DEGREE_STEP);
    Serial.print(" degrees: ");
    Serial.println(distance);

    // Check if obstacle is detected
    if (distance <= OBSTACLE_THRESHOLD) {
      if (!obstacleDetected) {
        obstacleDetected = true;  // Set obstacle detected status
        obstacleIgnored = false;  // Reset ignore flag
        Serial.println("Obstacle detected! Checking if obstacle is removed...");
      }

      // Continuously check if the obstacle is removed
      while (obstacleDetected) {
        long distance = measureDistance();  // Keep measuring distance

        if (distance > OBSTACLE_THRESHOLD) {
          // If the obstacle is removed
          Serial.println("Obstacle removed. Continuing movement...");
          obstacleDetected = false;  // Reset obstacle detected status
          break;  // Exit while loop, continue moving
        }

        // Check if a pulse signal is received to ignore the obstacle
        if (digitalRead(SIGNAL_PIN) == HIGH && !obstacleIgnored) {
          Serial.println("Pulse received: Obstacle ignored. Continuing movement.");
          obstacleDetected = false;  // Ignore the obstacle and continue moving
          obstacleIgnored = true;  // Mark that the obstacle is ignored
          skipObstacle = true;  // Flag that we are skipping the current obstacle
          break;  // Exit while loop
        }

        delay(100);  // Wait a little before checking again
      }
    } else {
      // If no obstacle, continue moving as usual
      delay(10);  // Small delay to allow for smooth motor movement
    }

    // If skipping obstacle, continue ignoring the obstacle
    if (skipObstacle) {
      Serial.println("Skipping the obstacle...");
      while (distance <= OBSTACLE_THRESHOLD) {  // Keep skipping as long as obstacle is present
        distance = measureDistance();  // Keep measuring distance
        delay(100);  // Continue checking
      }
      // Once the obstacle is skipped (removed), stop skipping and continue
      skipObstacle = false;
    }
  }

  Serial.println("Reached starting position.");
}

// Function to move the motor a certain number of steps (positive for clockwise, negative for counterclockwise)
void moveMotor(int direction) {
  int steps = direction * STEPS_PER_DEGREE * DEGREE_STEP;  // Move 5 degrees
  myStepper.step(steps);
}

// Function to measure distance using ultrasonic sensor
long measureDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);  // wait for the pulse to settle
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10); // trigger pulse
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH);  // measure duration of echo
  long distance = duration * 0.034 / 2;    // calculate distance in cm
  return distance;
}
```

### Conclusion

This system provides a robust solution for obstacle detection and avoidance in applications where a **Stepper Motor** needs to rotate without being hindered by obstacles. By utilizing an ultrasonic sensor for real-time distance measurements and a pulse input for dynamic obstacle ignoring, the motor can continue its movement seamlessly, ensuring efficient and smooth operation.

